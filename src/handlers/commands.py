from typing import Dict, List, Optional, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from loguru import logger

from src.database.db import Database
from src.utils.news_api import NewsAPIClient, Article


# –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
CATEGORIES = {
    "business": "–ë–∏–∑–Ω–µ—Å",
    "entertainment": "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
    "health": "–ó–¥–æ—Ä–æ–≤—å–µ",
    "science": "–ù–∞—É–∫–∞",
    "sports": "–°–ø–æ—Ä—Ç",
    "technology": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"
}


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db = Database()
    await db.add_user(
        user_id=user.id,
        username=user.username or "",
        first_name=user.first_name or "",
        last_name=user.last_name or ""
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
    keyboard = [
        [
            InlineKeyboardButton("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏", callback_data="news_latest"),
            InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="select_category")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–Ø NewsPulseBot ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/news ‚Äî –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
        "/latest [–∫–∞—Ç–µ–≥–æ—Ä–∏—è] ‚Äî –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )


async def news_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /news."""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–º–∞–Ω–¥—É
    db = Database()
    await db.update_user_preference(user_id=user.id, last_command="/news")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_prefs = await db.get_user_preferences(user.id)
    favorite_category = user_prefs.get("favorite_category") if user_prefs else None
    
    await update.message.reply_text("üîç –ò—â—É –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...")
    
    news_api = NewsAPIClient()
    try:
        if favorite_category:
            articles = await news_api.get_top_headlines(category=favorite_category)
            category_name = CATEGORIES.get(favorite_category, favorite_category)
            intro_text = f"üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}':\n\n"
        else:
            articles = await news_api.get_top_headlines()
            intro_text = "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:\n\n"
        
        await send_articles(update, articles, intro_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {str(e)}")
        await update.message.reply_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def latest_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /latest [–∫–∞—Ç–µ–≥–æ—Ä–∏—è]."""
    user = update.effective_user
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    args = context.args
    category = args[0].lower() if args else None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ø—É—Å—Ç–∏–º–∞
    if category and category not in CATEGORIES:
        categories_text = ", ".join([f"{k} ({v})" for k, v in CATEGORIES.items()])
        await update.message.reply_text(
            f"‚ùå –£–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è.\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories_text}\n\n"
            f"–ü—Ä–∏–º–µ—Ä: /latest technology"
        )
        return
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–º–∞–Ω–¥—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    db = Database()
    await db.update_user_preference(
        user_id=user.id, 
        last_command=f"/latest {category}" if category else "/latest",
        favorite_category=category
    )
    
    await update.message.reply_text(f"üîç –ò—â—É –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏{f' –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {CATEGORIES.get(category, category)}' if category else ''}...")
    
    news_api = NewsAPIClient()
    try:
        articles = await news_api.get_top_headlines(category=category)
        
        if category:
            category_name = CATEGORIES.get(category, category)
            intro_text = f"üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}':\n\n"
        else:
            intro_text = "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:\n\n"
        
        await send_articles(update, articles, intro_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {str(e)}")
        await update.message.reply_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def send_articles(update: Update, articles: List[Article], intro_text: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        articles: –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        intro_text: –í–≤–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ —Å–ø–∏—Å–∫–æ–º —Å—Ç–∞—Ç–µ–π
    """
    if not articles:
        await update.message.reply_text("üòî –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    message_text = intro_text
    
    for i, article in enumerate(articles, 1):
        message_text += (
            f"{i}. [{article.title}]({article.url})\n"
            f"   üóûÔ∏è {article.source}\n"
            f"   üìù {article.description[:100] + '...' if article.description and len(article.description) > 100 else article.description or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = [
        [
            InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_news"),
            InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="select_category")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        message_text,
        reply_markup=reply_markup,
        parse_mode="Markdown",
        disable_web_page_preview=True
    )


async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    user = query.from_user
    
    await query.answer()
    
    if query.data == "news_latest":
        # –≠–º—É–ª–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /news
        context.args = []
        await news_command(update, context)
    
    elif query.data == "select_category":
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        keyboard = []
        row = []
        
        for i, (category_key, category_name) in enumerate(CATEGORIES.items(), 1):
            row.append(InlineKeyboardButton(
                category_name, callback_data=f"category_{category_key}"
            ))
            
            # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
            if i % 2 == 0 or i == len(CATEGORIES):
                keyboard.append(row)
                row = []
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π:",
            reply_markup=reply_markup
        )
    
    elif query.data.startswith("category_"):
        category = query.data.split("_")[1]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        db = Database()
        await db.update_user_preference(
            user_id=user.id,
            favorite_category=category
        )
        
        # –≠–º—É–ª–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /latest —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
        context.args = [category]
        await latest_command(update, context)
    
    elif query.data == "refresh_news":
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É
        db = Database()
        user_prefs = await db.get_user_preferences(user.id)
        last_command = user_prefs.get("last_command") if user_prefs else "/news"
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É
        if last_command.startswith("/latest "):
            category = last_command.split(" ")[1]
            context.args = [category]
            await latest_command(update, context)
        else:
            context.args = []
            await news_command(update, context) 